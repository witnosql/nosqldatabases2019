


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Create",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab introduces the CREATE functions in MongoDB.</p>",
  "folder" : "book-a-create",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Objectives",
    "shortTitle": "Create",
    "contentMd" : "# Objectives\r\n\r\nThis lab introduces the CREATE functions in MongoDB.\r\n"
    },
  
    {
    "title": "# MongoDB CRUD Overview",
    "shortTitle": "01",
    "contentMd" : "# MongoDB CRUD Overview\r\n\r\n## Create Operations\r\n\r\nCreate or insert operations add new documents to a collection. If the collection does not currently exist, insert operations will create the collection.\r\n\r\nMongoDB provides the following methods to insert documents into a collection:\r\n\r\n~~~\r\ndb.collection.insert()\r\ndb.collection.insertOne()\r\ndb.collection.insertMany()\r\n~~~\r\n\r\nIn MongoDB, insert operations target a single collection. All write operations in MongoDB are atomic on the level of a single document.\r\n\r\n\r\n## Read Operations\r\n\r\nRead operations retrieves documents from a collection; i.e. queries a collection for documents. MongoDB provides the following methods to read documents from a collection:\r\n\r\n~~~\r\ndb.collection.find()\r\n~~~\r\n\r\nYou can specify query filters or criteria that identify the documents to return.\r\n\r\n\r\n## Update Operations\r\n\r\nUpdate operations modify existing documents in a collection. MongoDB provides the following methods to update documents of a collection:\r\n\r\n~~~\r\ndb.collection.update()\r\ndb.collection.updateOne()\r\ndb.collection.updateMany()\r\n~~~\r\n\r\nIn MongoDB, update operations target a single collection. You can specify criteria, or filters, that identify the documents to update. These filters use the same syntax as read operations.\r\n\r\n\r\n## Delete Operations\r\n\r\nDelete operations remove documents from a collection. MongoDB provides the following methods to delete documents of a collection:\r\n\r\n~~~\r\ndb.collection.remove()\r\ndb.collection.deleteOne()\r\ndb.collection.deleteMany()\r\n~~~\r\n\r\nIn MongoDB, delete operations target a single collection. You can specify criteria, or filters, that identify the documents to remove. These filters use the same syntax as read and update operations.\r\n"
    },
  
    {
    "title": "# grades.json",
    "shortTitle": "02",
    "contentMd" : "# grades.json\r\n\r\nIn this lab, we will import a set of documents from a JSON file and then work with this data. The JSON file contains student grades with the following information:\r\n\r\n- `_id` : each document has an id property, which has as its value an oid (object id)\r\n- `student_id` : each student has an id number\r\n- `class_id` : each class has an id number\r\n- `scores` : scores is an array of objects. Each object contains two properties:\r\n  - `type` : a string, describing the score type (exam, quiz, or homework)\r\n  - `score` : a float, containing the score\r\n\r\n## sample document\r\n\r\n~~~\r\n{\r\n  \"_id\" : { \"$oid\" : \"50b59cd75bed76f46522c34e\" },\r\n  \"student_id\" : 0,\r\n  \"class_id\" : 2,\r\n  \"scores\" : [\r\n    { \"type\" : \"exam\", \"score\" : 57.92947112575566 },\r\n    { \"type\" : \"quiz\", \"score\" : 21.24542588206755 },\r\n    { \"type\" : \"homework\", \"score\" : 68.19567810587429 },\r\n    { \"type\" : \"homework\", \"score\" : 67.95019716560351 },\r\n    { \"type\" : \"homework\", \"score\" : 18.81037253352722 }\r\n  ]\r\n}\r\n~~~\r\n\r\n## importing grades.json\r\n\r\n- Download and unzip this file: [grades.zip](./archives/grades.zip)\r\n- Place the grades.json file into your mongodb bin folder (e.g. `C:\\Program Files\\MongoDB\\Server\\4.0\\bin`)\r\n- Open a command prompt and change directory to the mongodb bin folder:\r\n\r\n![](img/mongobin.png)\r\n\r\n- Enter the following command to import the grades.json file:\r\n\r\n~~~\r\nmongoimport -d grades -c grades --drop grades.json\r\n~~~\r\n\r\n- Syntax explained:\r\n  - **-d grades:** -d creates a database, which we are naming grades\r\n  - **-c grades:** -c creates a collection , which we are also naming grades\r\n  - **--drop:** the drop command will drop the grades collection if it already exists\r\n  - **grades.json:** lastly, we provide the filename. If the file is not in the mongodb bin folder then you would need to provide the full path to the file.\r\n\r\n- You should see the following output after a successful import:\r\n\r\n![](img/mongoimport.png)\r\n\r\n- Start up your mongod.exe process, and then start the mongo.exe process in a second command prompt.\r\n- In the mongo.exe window, enter the `show dbs` command.\r\n- You should see the following output, confirming that your grades database now exists.\r\n\r\n![](img/afterimport.png)\r\n\r\n- Run a find() statement to see a subset of the data we have imported. Don't forget to run the 'use grades' command first to switch to the grades database.\r\n\r\n~~~\r\nuse grades\r\n\r\ndb.grades.find({class_id:2}).pretty()\r\n~~~\r\n\r\n- Your output should look something like this:\r\n\r\n![](img/findclassid.png)\r\n\r\n\r\nWe will discuss find() in greater detail in the next section. First, we will look at insert statements to add documents to our grades collection.\r\n"
    },
  
    {
    "title": "# db.collection.insert()",
    "shortTitle": "03",
    "contentMd" : "# db.collection.insert()\r\n\r\nInserts a document or documents into a collection.\r\n\r\nThe insert() method has the following syntax:\r\n~~~\r\ndb.products.insert( { _id: 10, item: \"box\", qty: 20 } )\r\n~~~\r\n\r\nThis example creates a document in the products collection, with an id of 10, an item property with the value \"box\" and a qty property with the value 20. If the products collection does not exist, then the insert() method will create the collection.\r\n\r\n## `_id` Field\r\n\r\nIf the document does not specify an `_id` field, then MongoDB will add the `_id` field and assign a unique ObjectId for the document before inserting. If the document does contain an `_id` field, the `_id` value must be unique within the collection to avoid duplicate key error.\r\n\r\n## Examples\r\n\r\n### Insert a Document without Specifying an `_id` Field\r\n\r\nIn the following example, the document passed to the insert() method does not contain the `_id` field:\r\n\r\n~~~\r\ndb.products.insert( { item: \"card\", qty: 15 } )\r\n~~~\r\n\r\nDuring the insert, mongod will create the `_id` field and assign it a unique ObjectId value, as verified by the inserted document:\r\n\r\n~~~\r\n{ \"_id\" : ObjectId(\"5063114bd386d8fadbd6b004\"), \"item\" : \"card\", \"qty\" : 15 }\r\n~~~\r\n\r\nThe ObjectId values are specific to the machine and time when the operation is run. As such, your values may differ from those in the example.\r\n\r\n### Insert a Document Specifying an `_id` Field\r\n\r\nIn the following example, the document passed to the insert() method includes the `_id` field. The value of `_id` must be unique within the collection to avoid duplicate key error.\r\n\r\n~~~\r\ndb.products.insert( { _id: 10, item: \"box\", qty: 20 } )\r\n~~~\r\n\r\nThe operation inserts the following document in the products collection:\r\n\r\n~~~\r\n{ \"_id\" : 10, \"item\" : \"box\", \"qty\" : 20 }\r\n~~~\r\n\r\n### Insert Multiple Documents\r\n\r\nThe following example performs a bulk insert of three documents by passing an array of documents to the insert() method. By default, MongoDB performs an ordered insert. With ordered inserts, if an error occurs during an insert of one of the documents, MongoDB returns an error without processing the remaining documents in the array.\r\n\r\nThe documents in the array do not need to have the same fields. For instance, the first document in the array has an `_id` field and a type field. Because the second and third documents do not contain an `_id` field, mongod will create the `_id` field for the second and third documents during the insert:\r\n\r\n~~~\r\ndb.products.insert(\r\n   [\r\n     { _id: 11, item: \"pencil\", qty: 50, type: \"no.2\" },\r\n     { item: \"pen\", qty: 20 },\r\n     { item: \"eraser\", qty: 25 }\r\n   ]\r\n)\r\n~~~\r\n\r\nThe operation inserted the following three documents:\r\n\r\n~~~\r\n{ \"_id\" : 11, \"item\" : \"pencil\", \"qty\" : 50, \"type\" : \"no.2\" }\r\n{ \"_id\" : ObjectId(\"51e0373c6f35bd826f47e9a0\"), \"item\" : \"pen\", \"qty\" : 20 }\r\n{ \"_id\" : ObjectId(\"51e0373c6f35bd826f47e9a1\"), \"item\" : \"eraser\", \"qty\" : 25 }\r\n~~~\r\n\r\n### Perform an Unordered Insert\r\n\r\nThe following example performs an unordered insert of three documents. With unordered inserts, if an error occurs during an insert of one of the documents, MongoDB continues to insert the remaining documents in the array.\r\n\r\n~~~\r\ndb.products.insert(\r\n   [\r\n     { _id: 20, item: \"lamp\", qty: 50, type: \"desk\" },\r\n     { _id: 21, item: \"lamp\", qty: 20, type: \"floor\" },\r\n     { _id: 22, item: \"bulk\", qty: 100 }\r\n   ],\r\n   { ordered: false }\r\n)\r\n~~~\r\n\r\n## Exercises:\r\n\r\n### Exercise One:\r\n\r\n - Add a new document with the following details:\r\n   - student_id: 50\r\n   - class_id: 28\r\n   - array of scores:\r\n     - exam 58.6\r\n     - quiz 22.4\r\n     - homework, 74.2\r\n     - homework, 68.3\r\n     - homework, 17.9\r\n\r\n- When creating the document, take care to match the structure of the existing documents in the database. This is important later when you are querying the documents; we want them all to have the same properties so that our queries will work on all documents.\r\n\r\n~~~\r\n{\r\n  \"_id\" : { \"$oid\" : \"50b59cd75bed76f46522c34e\" },\r\n  \"student_id\" : 0,\r\n  \"class_id\" : 2,\r\n  \"scores\" : [\r\n    { \"type\" : \"exam\", \"score\" : 57.92947112575566 },\r\n    { \"type\" : \"quiz\", \"score\" : 21.24542588206755 },\r\n    { \"type\" : \"homework\", \"score\" : 68.19567810587429 },\r\n    { \"type\" : \"homework\", \"score\" : 67.95019716560351 },\r\n    { \"type\" : \"homework\", \"score\" : 18.81037253352722 }\r\n  ]\r\n}\r\n~~~\r\n\r\n- Run a find query to view the document you created ( `db.grades.find({student_id:50}).pretty()` )\r\n\r\n- Note that mongod has added an oid to the document\r\n\r\n### Exercise Two\r\n\r\n- Use the insert() statement to insert multiple documents; add both of these documents with the same statement.\r\n  - student_id: 50\r\n  - class_id: 10\r\n  - array of scores:\r\n    - exam 68.5\r\n    - quiz 24.7\r\n    - homework, 78.8\r\n    - homework, 69.5\r\n    - homework, 16.5\r\n  - student_id: 50\r\n  - class_id: 11\r\n  - array of scores:\r\n    - exam 52.1\r\n    - quiz 19.8\r\n    - homework, 55.3\r\n    - homework, 89.4\r\n    - homework, 18.7\r\n\r\n- Run a find query to view the documents you created. You should now see three documents in this student's results.\r\n  - db.grades.find({student_id:50}).pretty()\r\n"
    },
  
    {
    "title": "# db.collection.insertOne()",
    "shortTitle": "04",
    "contentMd" : "# db.collection.insertOne()\r\n\r\nInserts a single document into a collection.\r\n\r\nThe insertOne() method has the following syntax:\r\n\r\n~~~\r\ndb.products.insertOne( { item: \"card\", qty: 15 } );\r\n~~~\r\n\r\nAs with the insert() method, if the collection does not exist, then the insertOne() method creates the collection.\r\n\r\n---\r\n\r\n## insert() vs insertOne() and insertMany()\r\n\r\nWhat's the difference? As you have seen, you can use the insert() statement to insert one document and to insert multiple documents. However, the insert() method is deprecated and no longer compatible with some MongoDB drivers and external applications, so insertOne() and insertMany() are used instead. For us, working in the console, any of the options will work.\r\n\r\n---\r\n\r\n## Examples\r\n\r\n### Insert a Document without Specifying an `_id` Field\r\n\r\nIn the following example, the document passed to the insertOne() method does not contain the `_id` field:\r\n\r\n~~~\r\ndb.products.insertOne( { item: \"card\", qty: 15 } )\r\n~~~\r\n\r\nThe operation returns the following document:\r\n~~~\r\n{\r\n   \"acknowledged\" : true,\r\n   \"insertedId\" : ObjectId(\"56fc40f9d735c28df206d078\")\r\n}\r\n~~~\r\n\r\nBecause the documents did not include `_id`, mongod creates and adds the `_id` field and assigns it a unique ObjectId value.\r\n\r\n\r\n### Insert a Document Specifying an `_id` Field\r\n\r\nIn the following example, the document passed to the insertOne() method includes the `_id` field. The value of `_id` must be unique within the collection to avoid duplicate key error. Note: the use of try, catch and print here will provide more readable and user-friendly error messages.\r\n\r\n~~~\r\ntry {\r\n   db.products.insertOne( { _id: 10, item: \"box\", qty: 20 } );\r\n} catch (e) {\r\n   print (e);\r\n}\r\n~~~\r\n\r\nThe operation returns the following:\r\n\r\n{ \"acknowledged\" : true, \"insertedId\" : 10 }\r\n\r\nInserting an duplicate value for any key that is part of a unique index, such as `_id`, throws an exception. The following attempts to insert a document with a `_id` value that already exists:\r\n\r\n~~~\r\ntry {\r\n   db.products.insertOne( { _id: 10, \"item\" : \"packing peanuts\", \"qty\" : 200 } );\r\n} catch (e) {\r\n   print (e);\r\n}\r\n~~~\r\n\r\nSince `_id`: 10 already exists, the following exception is thrown:\r\n\r\n~~~\r\nWriteError({\r\n   \"index\" : 0,\r\n   \"code\" : 11000,\r\n   \"errmsg\" : \"E11000 duplicate key error collection: inventory.products index: _id_ dup key: { : 10.0 }\",\r\n   \"op\" : {\r\n      \"_id\" : 10,\r\n      \"item\" : \"packing peanuts\",\r\n      \"qty\" : 200\r\n   }\r\n})\r\n~~~\r\n\r\n## Exercises:\r\n\r\n### Exercise One:\r\n\r\n- Use insertOne() to add a new document with the following details:\r\n   - `_id`: 10\r\n   - student_id: 50\r\n   - class_id: 23\r\n   - array of scores:\r\n     - exam 54.1\r\n     - quiz 24.2\r\n     - homework, 65.8\r\n     - homework, 67.5\r\n     - homework, 18.1\r\n\r\n### Exercise Two:\r\n\r\n- Try to add the same document again. You should get an error message.\r\n- Add try, catch, and print (as shown above), and try to insert the document once more. Compare this error message with the previous one.\r\n"
    },
  
    {
    "title": "# db.collection.insertMany()",
    "shortTitle": "05",
    "contentMd" : "# db.collection.insertMany()\r\n\r\nInserts multiple documents into a collection.\r\n\r\nThe insertMany() method has the following syntax:\r\n\r\n~~~\r\ndb.products.insertMany( [\r\n   { item: \"card\", qty: 15 },\r\n   { item: \"envelope\", qty: 20 },\r\n   { item: \"stamps\" , qty: 30 }\r\n] );\r\n~~~\r\n\r\n\r\n## Examples\r\n\r\nThe following examples insert documents into the products collection.\r\n\r\n### Insert Several Document without Specifying an `_id` Field\r\n\r\nThe following example uses db.collection.insertMany() to insert documents that do not contain the `_id` field:\r\n\r\n~~~\r\ntry {\r\n   db.products.insertMany( [\r\n      { item: \"card\", qty: 15 },\r\n      { item: \"envelope\", qty: 20 },\r\n      { item: \"stamps\" , qty: 30 }\r\n   ] );\r\n} catch (e) {\r\n   print (e);\r\n}\r\n~~~\r\n\r\nThe operation returns the following document:\r\n\r\n~~~\r\n{\r\n   \"acknowledged\" : true,\r\n   \"insertedIds\" : [\r\n      ObjectId(\"562a94d381cb9f1cd6eb0e1a\"),\r\n      ObjectId(\"562a94d381cb9f1cd6eb0e1b\"),\r\n      ObjectId(\"562a94d381cb9f1cd6eb0e1c\")\r\n   ]\r\n}\r\n~~~\r\n\r\n\r\n### Insert Several Documents Specifying an `_id` Field\r\n\r\nThe following example/operation uses insertMany() to insert documents that include the `_id` field. The value of `_id` must be unique within the collection to avoid a duplicate key error.\r\n\r\n~~~\r\ntry {\r\n   db.products.insertMany( [\r\n      { _id: 10, item: \"large box\", qty: 20 },\r\n      { _id: 11, item: \"small box\", qty: 55 },\r\n      { _id: 12, item: \"medium box\", qty: 30 }\r\n   ] );\r\n} catch (e) {\r\n   print (e);\r\n}\r\n~~~\r\n\r\nThe operation returns the following document:\r\n\r\n~~~\r\n{ \"acknowledged\" : true, \"insertedIds\" : [ 10, 11, 12 ] }\r\n~~~\r\n\r\nInserting a duplicate value for any key that is part of a unique index, such as `_id`, throws an exception. The following attempts to insert a document with a `_id` value that already exists:\r\n\r\n~~~\r\ntry {\r\n   db.products.insertMany( [\r\n\r\n      { _id: 13, item: \"envelopes\", qty: 60 },\r\n      { _id: 13, item: \"stamps\", qty: 110 },\r\n      { _id: 14, item: \"packing tape\", qty: 38 }\r\n   ] );\r\n} catch (e) {\r\n   print (e);\r\n}\r\n~~~\r\n\r\nSince `_id`: 13 already exists, the following exception is thrown:\r\n\r\n~~~\r\nBulkWriteError({\r\n   \"writeErrors\" : [\r\n      {\r\n         \"index\" : 0,\r\n         \"code\" : 11000,\r\n         \"errmsg\" : \"E11000 duplicate key error collection: inventory.products index: _id_ dup key: { : 13.0 }\",\r\n         \"op\" : {\r\n            \"_id\" : 13,\r\n            \"item\" : \"stamps\",\r\n            \"qty\" : 110\r\n         }\r\n      }\r\n   ],\r\n   \"writeConcernErrors\" : [ ],\r\n   \"nInserted\" : 1,\r\n   \"nUpserted\" : 0,\r\n   \"nMatched\" : 0,\r\n   \"nModified\" : 0,\r\n   \"nRemoved\" : 0,\r\n   \"upserted\" : [ ]\r\n})\r\n~~~\r\n\r\nNote that one document was inserted: The first document of `_id`: 13 will insert successfully, but the second insert will fail. This will also stop additional documents left in the queue from being inserted.\r\n\r\nWith ordered set to false, the insert operation would continue with any remaining documents.\r\n\r\n~~~\r\ntry {\r\n   db.products.insertMany( [\r\n      { _id: 13, item: \"stamps\", qty: 125 },\r\n      { _id: 13, item: \"tape\", qty: 20},\r\n      { _id: 14, item: \"bubble wrap\", qty: 30}\r\n   ], { ordered: false } );\r\n} catch (e) {\r\n   print (e);\r\n}\r\n~~~\r\n\r\n\r\n## Exercise:\r\n\r\n- Use the insertMany() statement to insert multiple documents; add both of these documents with the same statement.\r\n  - student_id: 50\r\n  - class_id: 2\r\n  - array of scores:\r\n    - exam 58.6\r\n    - quiz 18.9\r\n    - homework, 58.7\r\n    - homework, 68.7\r\n    - homework, 17.8\r\n  - student_id: 50\r\n  - class_id: 15\r\n  - array of scores:\r\n    - exam 55.4\r\n    - quiz 18.7\r\n    - homework, 59.5\r\n    - homework, 82.1\r\n    - homework, 16.8\r\n\r\n- Run a find query to view the documents you created. You should now see six documents in this student's results.\r\n  - db.grades.find({student_id:50}).pretty()\r\n"
    }
  
  ]
  }

